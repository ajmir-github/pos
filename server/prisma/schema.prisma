// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../database"
  // output   = "../node_modules/@prisma/client"
  // binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:../source.db"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// -------------------- Section One: User Model 

enum UserRole {
  admin
  manager
  cashier
  waiter
  kitchen
}

model User {
  id        String    @id @default(uuid())
  username  String    @unique
  password  String
  fullName  String
  role      UserRole
  deletedAt DateTime?
  // relationships
  orders    Order[]
  payments  Payment[]
  tables    Table[]
  tabs      Tab[]

  // index
  @@index([username])
}

model Color {
  id        String    @id @default(uuid())
  name      String
  style     String
  deletedAt DateTime?
  // relationships
  items     Item[]
}

// -------------------- Section Two: Item Model 

model Category {
  id        String    @id @default(uuid())
  name      String
  index     Int       @default(0)
  deletedAt DateTime?
  // relationships
  items     Item[]
}

model ModifierOption {
  id        String    @id @default(uuid())
  name      String
  price     Float
  deletedAt DateTime?

  // relationships
  modifiers  Modifier[]  @relation("ModifierOptionsOnModifers") // many-to-many
  orderItems OrderItem[] @relation("modifierOptionsOnOrderItem") // many-to-many
}

model Modifier {
  id        String           @id @default(uuid())
  name      String
  multiple  Boolean
  required  Boolean
  deletedAt DateTime?
  // relationships
  options   ModifierOption[] @relation("ModifierOptionsOnModifers") // many-to-many
  items     Item[]           @relation("ModifiersOnItems")
}

model Item {
  id          String    @id @default(uuid())
  name        String
  price       Float
  description String?
  deletedAt   DateTime?

  // relationships
  colorId    String
  color      Color       @relation(fields: [colorId], references: [id])
  categoryId String
  category   Category    @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  modifiers  Modifier[]  @relation("ModifiersOnItems")
}

// -------------------- Section Three: Tab Model 

enum DiscountType {
  unset
  fixed
  percentage
}

enum TableStatus {
  Going
  Paying
  Closed
}

model Table {
  id            String       @id @default(uuid())
  number        Int
  status        TableStatus
  discountType  DiscountType @default(unset)
  discountValue Float        @default(0)
  total         Float
  totalOfTabs   Float
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?

  // relationships
  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])
  tabs        Tab[]
}

model Tab {
  id            String       @id @default(uuid())
  number        Int
  description   String?
  discountType  DiscountType @default(unset)
  discountValue Float        @default(0)
  totalOfItems  Float
  total         Float
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
  // relationships
  createdById   String
  createdBy     User         @relation(fields: [createdById], references: [id])
  tableId       String
  table         Table        @relation(fields: [tableId], references: [id])
  orders        Order[]
}

enum OrderStatus {
  drafted
  sent
  cancelled
}

model Order {
  id        String      @id @default(uuid())
  status    OrderStatus @default(drafted)
  total     Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?

  // relationships
  createdById String
  createdBy   User        @relation(fields: [createdById], references: [id])
  orderItems  OrderItem[]
  tab         Tab         @relation(fields: [tabId], references: [id])
  tabId       String
}

model OrderItem {
  id        String    @id @default(uuid())
  quantity  Int
  price     Float // per item
  total     Float
  deletedAt DateTime?

  // relationships
  orderId String
  order   Order            @relation(fields: [orderId], references: [id])
  itemId  String
  item    Item             @relation(fields: [itemId], references: [id])
  options ModifierOption[] @relation("modifierOptionsOnOrderItem") // many-to-many
}

enum PaymentMethod {
  cash
  card
  mixed
}

model Payment {
  id          String        @id @default(uuid())
  tableNumber Int
  tabNumber   Int
  amountCash  Float
  amountCard  Float
  total       Float
  method      PaymentMethod
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

enum PrinterTargetType {
  All
  User
  Category
  Table
  Item
}

model Printer {
  id         String            @id @default(uuid())
  name       String
  targetType PrinterTargetType @default(All)
  targetRef  String? // user id, category id, table number
  location   String?
  ip         String?
  isActive   Boolean           @default(true)
  deletedAt  DateTime?

  // relationships

  @@index([name])
}
